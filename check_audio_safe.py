import os
import time
import librosa
import soundfile as sf
from mutagen import File
import wave
import subprocess

def wait_for_audio_ready(file_path, min_size_mb=0.01, max_wait_time=60, check_interval=1, min_duration=0.1):
    """
    Ki·ªÉm tra file audio ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng
    
    Args:
        file_path: ƒë∆∞·ªùng d·∫´n file audio c·∫ßn ki·ªÉm tra
        min_size_mb: k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu c·ªßa file (MB)
        max_wait_time: th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y)
        check_interval: kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ki·ªÉm tra (gi√¢y)
        min_duration: th·ªùi l∆∞·ª£ng audio t·ªëi thi·ªÉu (gi√¢y)
    
    Returns:
        bool: True n·∫øu file s·∫µn s√†ng, False n·∫øu timeout
    """
    print(f"üéµ ƒêang ki·ªÉm tra file audio: {file_path}")
    start_time = time.time()
    min_size_bytes = min_size_mb * 1024 * 1024
    last_size = 0
    stable_count = 0
    
    while time.time() - start_time < max_wait_time:
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(file_path):
            print(f"‚è≥ File ch∆∞a t·ªìn t·∫°i. Ch·ªù {check_interval}s...")
            time.sleep(check_interval)
            continue
        
        try:
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            current_size = os.path.getsize(file_path)
            print(f"üìè K√≠ch th∆∞·ªõc file hi·ªán t·∫°i: {current_size / (1024*1024):.2f} MB")
            
            # Ki·ªÉm tra file c√≥ ƒë·ªß k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu kh√¥ng
            if current_size < min_size_bytes:
                print(f"‚ö†Ô∏è File ch∆∞a ƒë·ªß k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu ({min_size_mb} MB). Ch·ªù...")
                time.sleep(check_interval)
                continue
            
            # Ki·ªÉm tra file c√≥ ƒëang ƒë∆∞·ª£c ghi kh√¥ng (k√≠ch th∆∞·ªõc ·ªïn ƒë·ªãnh)
            if current_size == last_size:
                stable_count += 1
                if stable_count >= 3:  # File ·ªïn ƒë·ªãnh trong 3 l·∫ßn ki·ªÉm tra
                    print("üìä File ·ªïn ƒë·ªãnh, ti·∫øn h√†nh ki·ªÉm tra t√≠nh to√†n v·∫πn audio...")
                    
                    # Ki·ªÉm tra file audio c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c kh√¥ng
                    if _validate_audio_file(file_path, min_duration):
                        return True
                    
                    time.sleep(check_interval)
            else:
                stable_count = 0
                last_size = current_size
                print(f"üîÑ File ƒëang thay ƒë·ªïi k√≠ch th∆∞·ªõc...")
                time.sleep(check_interval)
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra file: {e}")
            time.sleep(check_interval)
    
    print(f"‚ùå Timeout sau {max_wait_time}s")
    return False

def _validate_audio_file(file_path, min_duration=0.1):
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file audio b·∫±ng nhi·ªÅu ph∆∞∆°ng ph√°p
    """
    file_ext = os.path.splitext(file_path)[1].lower()
    
    # Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng librosa (t·ªët nh·∫•t cho h·∫ßu h·∫øt format)
    try:
        duration = librosa.get_duration(path=file_path)
        if duration >= min_duration:
            print(f"‚úÖ File h·ª£p l·ªá (librosa) - Th·ªùi l∆∞·ª£ng: {duration:.2f}s")
            return True
        else:
            print(f"‚ö†Ô∏è File qu√° ng·∫Øn: {duration:.2f}s < {min_duration}s")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói librosa: {e}")
    
    # Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng soundfile
    try:
        with sf.SoundFile(file_path) as f:
            frames = len(f)
            samplerate = f.samplerate
            duration = frames / samplerate
            if duration >= min_duration:
                print(f"‚úÖ File h·ª£p l·ªá (soundfile) - Th·ªùi l∆∞·ª£ng: {duration:.2f}s, SR: {samplerate}Hz")
                return True
            else:
                print(f"‚ö†Ô∏è File qu√° ng·∫Øn: {duration:.2f}s < {min_duration}s")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói soundfile: {e}")
    
    # Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng mutagen (t·ªët cho metadata)
    try:
        audio_file = File(file_path)
        if audio_file is not None and hasattr(audio_file, 'info'):
            duration = audio_file.info.length
            if duration >= min_duration:
                print(f"‚úÖ File h·ª£p l·ªá (mutagen) - Th·ªùi l∆∞·ª£ng: {duration:.2f}s")
                return True
            else:
                print(f"‚ö†Ô∏è File qu√° ng·∫Øn: {duration:.2f}s < {min_duration}s")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói mutagen: {e}")
    
    # Ph∆∞∆°ng ph√°p 4: S·ª≠ d·ª•ng wave (ch·ªâ cho file WAV)
    if file_ext == '.wav':
        try:
            with wave.open(file_path, 'rb') as wav_file:
                frames = wav_file.getnframes()
                sample_rate = wav_file.getframerate()
                duration = frames / sample_rate
                if duration >= min_duration:
                    print(f"‚úÖ File WAV h·ª£p l·ªá - Th·ªùi l∆∞·ª£ng: {duration:.2f}s, SR: {sample_rate}Hz")
                    return True
                else:
                    print(f"‚ö†Ô∏è File qu√° ng·∫Øn: {duration:.2f}s < {min_duration}s")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói wave: {e}")
    
    # Ph∆∞∆°ng ph√°p 5: S·ª≠ d·ª•ng ffprobe (y√™u c·∫ßu ffmpeg)
    try:
        result = subprocess.run([
            'ffprobe', '-v', 'quiet', '-show_entries', 
            'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', 
            file_path
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            duration = float(result.stdout.strip())
            if duration >= min_duration:
                print(f"‚úÖ File h·ª£p l·ªá (ffprobe) - Th·ªùi l∆∞·ª£ng: {duration:.2f}s")
                return True
            else:
                print(f"‚ö†Ô∏è File qu√° ng·∫Øn: {duration:.2f}s < {min_duration}s")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói ffprobe: {e}")
    
    print("‚ùå Kh√¥ng th·ªÉ x√°c th·ª±c file audio b·∫±ng b·∫•t k·ª≥ ph∆∞∆°ng ph√°p n√†o")
    return False

# ========== C√ÅCH S·ª¨ D·ª§NG ƒê∆†N GI·∫¢N ==========

def simple_audio_check(file_path):
    """
    Ki·ªÉm tra file audio ƒë∆°n gi·∫£n - ch·ªâ c·∫ßn g·ªçi 1 d√≤ng
    """
    return wait_for_audio_ready(file_path, min_size_mb=0.05, max_wait_time=30, min_duration=0.5)

def quick_audio_check(file_path, timeout=15):
    """
    Ki·ªÉm tra nhanh file audio v·ªõi timeout ng·∫Øn
    """
    return wait_for_audio_ready(file_path, min_size_mb=0.01, max_wait_time=timeout, min_duration=0.1)

# ========== TEMPLATE √ÅP D·ª§NG ==========

# Template 1: X·ª≠ l√Ω audio c∆° b·∫£n
def process_audio_with_check():
    input_file = "input_audio.wav"
    output_file = "output_audio.wav"
    
    # Ki·ªÉm tra file input
    if not wait_for_audio_ready(input_file):
        print("‚ùå File input kh√¥ng s·∫µn s√†ng")
        return False
    
    # Th·ª±c hi·ªán x·ª≠ l√Ω audio c·ªßa b·∫°n ·ªü ƒë√¢y
    print("üéµ ƒêang x·ª≠ l√Ω audio...")
    # your_audio_processing_code()
    
    # Ki·ªÉm tra file output
    if wait_for_audio_ready(output_file, min_duration=1.0):
        print("‚úÖ X·ª≠ l√Ω audio th√†nh c√¥ng!")
        return True
    else:
        print("‚ùå File output kh√¥ng ƒë∆∞·ª£c t·∫°o ho·∫∑c kh√¥ng h·ª£p l·ªá")
        return False

# Template 2: Batch processing v·ªõi ki·ªÉm tra
def batch_audio_processing(input_files, output_dir):
    """
    X·ª≠ l√Ω nhi·ªÅu file audio v·ªõi ki·ªÉm tra
    """
    results = []
    
    for input_file in input_files:
        print(f"\nüéµ X·ª≠ l√Ω: {input_file}")
        
        # Ki·ªÉm tra file input
        if not wait_for_audio_ready(input_file):
            print(f"‚ùå B·ªè qua file: {input_file}")
            results.append((input_file, False, "Input kh√¥ng s·∫µn s√†ng"))
            continue
        
        # T·∫°o t√™n file output
        filename = os.path.basename(input_file)
        name, ext = os.path.splitext(filename)
        output_file = os.path.join(output_dir, f"{name}_processed{ext}")
        
        # Th·ª±c hi·ªán x·ª≠ l√Ω
        try:
            # your_audio_processing_function(input_file, output_file)
            
            # Ki·ªÉm tra output
            if wait_for_audio_ready(output_file, min_duration=0.5):
                print(f"‚úÖ Th√†nh c√¥ng: {output_file}")
                results.append((input_file, True, output_file))
            else:
                print(f"‚ùå L·ªói output: {output_file}")
                results.append((input_file, False, "Output kh√¥ng h·ª£p l·ªá"))
                
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")
            results.append((input_file, False, str(e)))
    
    return results

# Template 3: Theo d√µi qu√° tr√¨nh render/export audio
def monitor_audio_export(output_path, expected_duration=None, timeout=120):
    """
    Theo d√µi qu√° tr√¨nh export/render audio
    """
    print(f"üéµ Theo d√µi export audio: {output_path}")
    
    # TƒÉng th·ªùi gian ch·ªù cho file l·ªõn
    if expected_duration and expected_duration > 60:
        timeout = max(timeout, expected_duration * 2)
    
    min_duration = expected_duration * 0.8 if expected_duration else 0.5
    
    success = wait_for_audio_ready(
        output_path, 
        min_size_mb=0.1,
        max_wait_time=timeout,
        min_duration=min_duration
    )
    
    if success:
        print("üéâ Export audio ho√†n t·∫•t!")
        return True
    else:
        print("üí• Export audio th·∫•t b·∫°i ho·∫∑c timeout!")
        return False

# # ========== EXAMPLE USAGE ==========
# if __name__ == "__main__":
#     # V√≠ d·ª• s·ª≠ d·ª•ng
#     audio_file = "test_audio.wav"
    
#     print("=== Test 1: Ki·ªÉm tra ƒë∆°n gi·∫£n ===")
#     if simple_audio_check(audio_file):
#         print("Ready to use!")
    
#     print("\n=== Test 2: Ki·ªÉm tra nhanh ===")
#     if quick_audio_check(audio_file):
#         print("Quick check passed!")
    
#     print("\n=== Test 3: Ki·ªÉm tra chi ti·∫øt ===")
#     if wait_for_audio_ready(audio_file, min_size_mb=0.1, max_wait_time=60, min_duration=2.0):
#         print("Detailed check passed!")