import os
import time
import cv2

def wait_for_file_ready(file_path, min_size_mb=0.1, max_wait_time=60, check_interval=1):
    """
    Ki·ªÉm tra file ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng
    
    Args:
        file_path: ƒë∆∞·ªùng d·∫´n file c·∫ßn ki·ªÉm tra
        min_size_mb: k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu c·ªßa file (MB)
        max_wait_time: th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y)
        check_interval: kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn ki·ªÉm tra (gi√¢y)
    
    Returns:
        bool: True n·∫øu file s·∫µn s√†ng, False n·∫øu timeout
    """
    print(f"üîç ƒêang ki·ªÉm tra file: {file_path}")
    start_time = time.time()
    min_size_bytes = min_size_mb * 1024 * 1024
    last_size = 0
    stable_count = 0
    
    while time.time() - start_time < max_wait_time:
        # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(file_path):
            print(f"‚è≥ File ch∆∞a t·ªìn t·∫°i. Ch·ªù {check_interval}s...")
            time.sleep(check_interval)
            continue
        
        try:
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            current_size = os.path.getsize(file_path)
            print(f"üìè K√≠ch th∆∞·ªõc file hi·ªán t·∫°i: {current_size / (1024*1024):.2f} MB")
            
            # Ki·ªÉm tra file c√≥ ƒë·ªß k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu kh√¥ng
            if current_size < min_size_bytes:
                print(f"‚ö†Ô∏è File ch∆∞a ƒë·ªß k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu ({min_size_mb} MB). Ch·ªù...")
                time.sleep(check_interval)
                continue
            
            # Ki·ªÉm tra file c√≥ ƒëang ƒë∆∞·ª£c ghi kh√¥ng (k√≠ch th∆∞·ªõc ·ªïn ƒë·ªãnh)
            if current_size == last_size:
                stable_count += 1
                if stable_count >= 3:  # File ·ªïn ƒë·ªãnh trong 3 l·∫ßn ki·ªÉm tra
                    print("üìä File ·ªïn ƒë·ªãnh, ti·∫øn h√†nh ki·ªÉm tra t√≠nh to√†n v·∫πn...")
                    
                    # Ki·ªÉm tra file c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c kh√¥ng
                    try:
                        cap = cv2.VideoCapture(file_path)
                        if cap.isOpened():
                            frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                            fps = cap.get(cv2.CAP_PROP_FPS)
                            cap.release()
                            
                            if frame_count > 0 and fps > 0:
                                print(f"‚úÖ File h·ª£p l·ªá - Frames: {frame_count}, FPS: {fps}")
                                return True
                            else:
                                print("‚ùå File video kh√¥ng h·ª£p l·ªá")
                        else:
                            print("‚ùå Kh√¥ng th·ªÉ m·ªü file video")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi ki·ªÉm tra file: {e}")
                    
                    time.sleep(check_interval)
            else:
                stable_count = 0
                last_size = current_size
                print(f"üîÑ File ƒëang thay ƒë·ªïi k√≠ch th∆∞·ªõc...")
                time.sleep(check_interval)
                
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra file: {e}")
            time.sleep(check_interval)
    
    print(f"‚ùå Timeout sau {max_wait_time}s")
    return False

# ========== C√ÅCH S·ª¨ D·ª§NG ƒê∆†N GI·∫¢N ==========

def simple_file_check(file_path):
    """
    Ki·ªÉm tra file ƒë∆°n gi·∫£n - ch·ªâ c·∫ßn g·ªçi 1 d√≤ng
    """
    return wait_for_file_ready(file_path, min_size_mb=0.5, max_wait_time=30)

# ========== TEMPLATE √ÅP D·ª§NG ==========

# Template 1: C√°ch c∆° b·∫£n
def your_processing_function():
    input_file = "input_video.mp4"
    output_file = "output_video.mp4"
    
    # Ki·ªÉm tra file input
    if not wait_for_file_ready(input_file):
        print("‚ùå File input kh√¥ng s·∫µn s√†ng")
        return False
    
    # Th·ª±c hi·ªán x·ª≠ l√Ω c·ªßa b·∫°n ·ªü ƒë√¢y
    # your_video_processing_code()
    
    # Ki·ªÉm tra file output
    if wait_for_file_ready(output_file):
        print("‚úÖ X·ª≠ l√Ω th√†nh c√¥ng!")
        return True
    else:
        print("‚ùå File output kh√¥ng ƒë∆∞·ª£c t·∫°o")
        return False
