import cv2
import numpy as np

def crop_and_resize_image(img, target_width, target_height):
    """
    Crop ·∫£nh v·ªÅ t·ªâ l·ªá khung h√¨nh mong mu·ªën v√† resize v·ªÅ k√≠ch th∆∞·ªõc c·ª• th·ªÉ
    
    Args:
        img: ·∫¢nh ƒë·∫ßu v√†o
        target_width: Chi·ªÅu r·ªông m·ª•c ti√™u
        target_height: Chi·ªÅu cao m·ª•c ti√™u
    
    Returns:
        ·∫¢nh ƒë√£ ƒë∆∞·ª£c crop v√† resize
    """
    h, w = img.shape[:2]
    target_ratio = target_width / target_height
    current_ratio = w / h
    
    if current_ratio > target_ratio:
        # ·∫¢nh qu√° r·ªông, c·∫ßn crop chi·ªÅu r·ªông
        new_width = int(h * target_ratio)
        start_x = (w - new_width) // 2
        cropped = img[:, start_x:start_x + new_width]
    else:
        # ·∫¢nh qu√° cao, c·∫ßn crop chi·ªÅu cao
        new_height = int(w / target_ratio)
        start_y = (h - new_height) // 2
        cropped = img[start_y:start_y + new_height, :]
    
    # Resize v·ªÅ k√≠ch th∆∞·ªõc m·ª•c ti√™u
    resized = cv2.resize(cropped, (target_width, target_height), interpolation=cv2.INTER_LANCZOS4)
    return resized

def apply_light_sweep(img, sweep_pos, sweep_width=100, intensity=1.5):
    """
    √Åp d·ª•ng hi·ªáu ·ª©ng qu√©t √°nh s√°ng
    
    Args:
        img: ·∫¢nh ƒë·∫ßu v√†o
        sweep_pos: V·ªã tr√≠ hi·ªán t·∫°i c·ªßa √°nh s√°ng
        sweep_width: ƒê·ªô r·ªông c·ªßa v√πng s√°ng
        intensity: C∆∞·ªùng ƒë·ªô √°nh s√°ng
    
    Returns:
        ·∫¢nh v·ªõi hi·ªáu ·ª©ng √°nh s√°ng
    """
    h, w = img.shape[:2]
    
    # T·∫°o mask s√°ng
    mask = np.zeros((h, w), dtype=np.float32)
    start = max(0, sweep_pos - sweep_width // 2)
    end = min(w, sweep_pos + sweep_width // 2)
    
    for i in range(start, end):
        brightness = 1 - abs(i - sweep_pos) / (sweep_width / 2)
        brightness = np.clip(brightness * intensity, 0, 1)
        mask[:, i] = brightness
    
    # L√†m m∆∞·ª£t mask
    mask = cv2.GaussianBlur(mask, (0, 0), sigmaX=15, sigmaY=15)
    
    # Nh√¢n mask v√†o ·∫£nh g·ªëc
    light = img.astype(np.float32) * (1 + mask[:, :, None])
    light = np.clip(light, 0, 255).astype(np.uint8)
    return light

def create_light_sweep_video(input_path, output_path, 
                           target_width=1920, target_height=1080,
                           sweep_width=150, intensity=1.5,
                           video_duration=3.0, fps=30,
                           sweep_speed_multiplier=1.0):
    """
    T·∫°o video v·ªõi hi·ªáu ·ª©ng qu√©t √°nh s√°ng
    
    Args:
        input_path: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu v√†o
        output_path: ƒê∆∞·ªùng d·∫´n video ƒë·∫ßu ra
        target_width: Chi·ªÅu r·ªông video m·ª•c ti√™u
        target_height: Chi·ªÅu cao video m·ª•c ti√™u
        sweep_width: ƒê·ªô r·ªông v√πng s√°ng
        intensity: C∆∞·ªùng ƒë·ªô √°nh s√°ng
        video_duration: Th·ªùi l∆∞·ª£ng video (gi√¢y)
        fps: S·ªë khung h√¨nh/gi√¢y
        sweep_speed_multiplier: H·ªá s·ªë t·ªëc ƒë·ªô qu√©t (1.0 = b√¨nh th∆∞·ªùng, >1 = nhanh h∆°n, <1 = ch·∫≠m h∆°n)
    """
    
    # Load v√† x·ª≠ l√Ω ·∫£nh
    print("üì∏ ƒêang load v√† x·ª≠ l√Ω ·∫£nh...")
    img = cv2.imread(input_path)
    if img is None:
        raise ValueError(f"Kh√¥ng th·ªÉ load ·∫£nh t·ª´ {input_path}")
    
    # Crop v√† resize ·∫£nh
    img_processed = crop_and_resize_image(img, target_width, target_height)
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω ·∫£nh: {img.shape} -> {img_processed.shape}")
    
    # T√≠nh to√°n th√¥ng s·ªë video
    total_frames = int(video_duration * fps)
    
    # T√≠nh to√°n kho·∫£ng c√°ch qu√©t
    # Qu√©t t·ª´ ngo√†i tr√°i (-sweep_width) ƒë·∫øn ngo√†i ph·∫£i (width + sweep_width)
    total_sweep_distance = target_width + 2 * sweep_width
    
    # √Åp d·ª•ng h·ªá s·ªë t·ªëc ƒë·ªô
    actual_sweep_distance = total_sweep_distance * sweep_speed_multiplier
    
    print(f"üé¨ T·∫°o video: {total_frames} frames, {fps} fps, {video_duration}s")
    print(f"‚ö° T·ªëc ƒë·ªô qu√©t: {sweep_speed_multiplier}x")
    
    # T·∫°o video writer
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, (target_width, target_height))
    
    # T·∫°o t·ª´ng frame
    for frame_idx in range(total_frames):
        # T√≠nh v·ªã tr√≠ √°nh s√°ng hi·ªán t·∫°i
        progress = frame_idx / (total_frames - 1)  # 0 -> 1
        sweep_pos = -sweep_width + progress * actual_sweep_distance
        sweep_pos = int(sweep_pos)
        
        # T·∫°o frame v·ªõi hi·ªáu ·ª©ng
        frame = apply_light_sweep(img_processed, sweep_pos, sweep_width, intensity)
        out.write(frame)
        
        # Hi·ªÉn th·ªã ti·∫øn ƒë·ªô
        if frame_idx % 10 == 0:
            percent = (frame_idx / total_frames) * 100
            print(f"‚è≥ Ti·∫øn ƒë·ªô: {percent:.1f}% ({frame_idx}/{total_frames})")
    
    out.release()
    print(f"‚úÖ Ho√†n th√†nh! ƒê√£ l∆∞u video: {output_path}")

# ====== C√ÅCH S·ª¨ D·ª§NG ======

if __name__ == "__main__":
    # C·∫•u h√¨nh c∆° b·∫£n
    input_image = "/content/coca_sp.jpg"  # ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫ßu v√†o
    output_video = "light_sweep_enhanced.mp4"  # Video ƒë·∫ßu ra
    
    # T√πy ch·ªânh th√¥ng s·ªë
    CONFIG = {
        # K√≠ch th∆∞·ªõc video
        "target_width": 448,      # Chi·ªÅu r·ªông video
        "target_height": 782,     # Chi·ªÅu cao video
        
        # Hi·ªáu ·ª©ng √°nh s√°ng
        "sweep_width": 200,        # ƒê·ªô r·ªông v√πng s√°ng (pixel)
        "intensity": 2.0,          # C∆∞·ªùng ƒë·ªô s√°ng (1.0-3.0)
        
        # Th·ªùi gian v√† t·ªëc ƒë·ªô
        "video_duration": 6.0,     # Th·ªùi l∆∞·ª£ng video (gi√¢y)
        "fps": 30,                 # Khung h√¨nh/gi√¢y
        "sweep_speed_multiplier": 0.8,  # T·ªëc ƒë·ªô qu√©t (0.5=ch·∫≠m, 1.0=b√¨nh th∆∞·ªùng, 2.0=nhanh)
    }
    
    try:
        create_light_sweep_video(
            input_path=input_image,
            output_path=output_video,
            **CONFIG
        )
        
        print("\nüéâ TH√ÄNH C√îNG!")
        print(f"üì∫ Video: {output_video}")
        print(f"‚è±Ô∏è  Th·ªùi l∆∞·ª£ng: {CONFIG['video_duration']}s")
        print(f"üìê K√≠ch th∆∞·ªõc: {CONFIG['target_width']}x{CONFIG['target_height']}")
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

# ====== C√ÅC V√ç D·ª§ PRESET ======

def create_quick_demo():
    """T·∫°o video demo nhanh (2 gi√¢y, 720p)"""
    create_light_sweep_video(
        input_path="phone.jpg",
        output_path="demo_quick.mp4",
        target_width=1280, target_height=720,
        video_duration=2.0,
        sweep_speed_multiplier=1.5
    )

def create_cinematic():
    """T·∫°o video cinematic ch·∫≠m r√£i (6 gi√¢y, 4K)"""
    create_light_sweep_video(
        input_path="phone.jpg", 
        output_path="cinematic.mp4",
        target_width=3840, target_height=2160,
        sweep_width=300, intensity=1.8,
        video_duration=6.0, fps=60,
        sweep_speed_multiplier=0.6
    )

def create_social_media():
    """T·∫°o video cho social media (vu√¥ng, 3 gi√¢y)"""
    create_light_sweep_video(
        input_path="phone.jpg",
        output_path="social_media.mp4", 
        target_width=1080, target_height=1080,
        video_duration=3.0,
        sweep_speed_multiplier=1.2
    )
