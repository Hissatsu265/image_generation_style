import os
import uuid
from pathlib import Path
from typing import List
import subprocess
import json
import random

import aiohttp
import aiofiles
import websockets
import glob
import time
from config import SERVER_COMFYUI,WORKFLOW_INFINITETALK_PATH,BASE_DIR
from PIL import Image
server_address = SERVER_COMFYUI
import shutil

import asyncio
from directus.file_upload import Uploadfile_directus
class VideoService:
    def __init__(self):
        from config import OUTPUT_DIR
        self.output_dir = OUTPUT_DIR

    def generate_output_filename(self) -> str:
        unique_id = str(uuid.uuid4())[:8]
        timestamp = int(asyncio.get_event_loop().time())
        return unique_id, f"video_{timestamp}_{unique_id}_1.png",f"video_{timestamp}_{unique_id}_2.png"

    async def create_video(self, image_paths: List[str], prompts: List[str], style: str, resolution: str, job_id: str) -> str:
        jobid, output_filename1,output_filename2 = self.generate_output_filename()
        # output_path1 = self.output_dir / output_filename1
        # output_path2 = self.output_dir / output_filename2
        # print("===============================")
        # print("hi: ",output_path1)
        # print("hi: ",output_path2)
        print("=============================================")
        print("promtp",prompts)
        print("image_paths",image_paths)
        print("style",style)
        print("resolution",resolution)
        print("===============================")

        try:
            from app.services.job_service import job_service
            await job_service.update_job_status(job_id, "processing", progress=99)
            # print("60")
            img = await run_job(jobid, prompts, image_paths, resolution,style)   
            # for path in img:
            #     print(path,"=====heh")
            # print("61")
            list_img=[]
            for path in img:
                print(path,"=====heh")
                path_directus= Uploadfile_directus(str(path))
                list_img.append(path_directus)

            folder = os.path.dirname(img[0])
            if os.path.exists(folder):
                shutil.rmtree(folder)
                print(f"ƒê√£ x√≥a th∆∞ m·ª•c: {folder}")
            else:
                print(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {folder}")

            return list_img
            # if path_directus is not None and output_path.exists() :
            #     print(f"Video upload successfully: {path_directus}")
            #     print(f"Job ID: {job_id}, Output Path: {path_directus}")
            #     os.remove(str(output_path))
            #     return str(path_directus)
            # else:
            #     raise Exception("Cannot upload video to Directus or Video creation failed - output file not found")
           
        except Exception as e:
            # if output_path1.exists():
            #     output_path1.unlink()
            raise e
async def run_job(job_id, prompts, cond_images,resolution,style):
    current_value=0
    img=await generate_video_cmd(
                prompt=prompts[current_value],
                cond_image=cond_images[current_value], 
                style=style, 
                job_id=job_id,
                resolution=resolution
            )
    # try:
    #     os.remove(cond_images[current_value])
    # except Exception as e:
    #     print(f"‚ùå Error removing temporary files: {str(e)}")
    return  img


# ============================================================================================

import asyncio
import signal

async def start_comfyui():
    process = await asyncio.create_subprocess_exec(
        "python3", "main.py",
        cwd=str(BASE_DIR / "ComfyUI"),  # ch·ªó ch·ª©a main.py
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    print("üöÄ ComfyUI started (PID:", process.pid, ")")
    return process
async def stop_comfyui(process):
    if process and process.returncode is None:
        print("üõë Stopping ComfyUI...")
        process.terminate()
        try:
            await asyncio.wait_for(process.wait(), timeout=10)
        except asyncio.TimeoutError:
            print("‚ö†Ô∏è Force killing ComfyUI...")
            process.kill()
            await process.wait()
async def load_workflow(path="workflow.json"):
    """Load workflow file b·∫•t ƒë·ªìng b·ªô"""
    async with aiofiles.open(path, "r", encoding='utf-8') as f:
        content = await f.read()
        return json.loads(content)

async def queue_prompt(workflow):
    """G·ª≠i workflow ƒë·∫øn ComfyUI server b·∫•t ƒë·ªìng b·ªô"""
    client_id = str(uuid.uuid4())
    
    payload = {
        "prompt": workflow, 
        "client_id": client_id
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"http://{server_address}/prompt",
            json=payload,
            headers={"Content-Type": "application/json"}
        ) as response:
            if response.status == 200:
                result = await response.json()
                result["client_id"] = client_id
                return result
            else:
                raise Exception(f"Failed to queue prompt: {response.status}")

async def wait_for_completion(prompt_id, client_id):
    print(f"ƒêang k·∫øt n·ªëi WebSocket ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh...")
    
    websocket_url = f"ws://{server_address}/ws?clientId={client_id}"
    
    try:
        async with websockets.connect(websocket_url) as websocket:
            print("‚úÖ ƒê√£ k·∫øt n·ªëi WebSocket")
            
            total_nodes = 0
            completed_nodes = 0
            
            while True:
                try:
                    msg = await asyncio.wait_for(websocket.recv(), timeout=30.0)
                    
                    if isinstance(msg, str):
                        data = json.loads(msg)                        
                        print(f"üì® Nh·∫≠n message: {data.get('type', 'unknown')}")
                        
                        if data["type"] == "execution_start":
                            print(f"üöÄ B·∫Øt ƒë·∫ßu th·ª±c thi workflow v·ªõi prompt_id: {data.get('data', {}).get('prompt_id')}")
                        
                        elif data["type"] == "executing":
                            node_id = data["data"]["node"]
                            # current_prompt_id = data["data"]["prompt_id"]
                            current_prompt_id = data.get("data", {}).get("prompt_id")

                            if current_prompt_id == prompt_id:
                                if node_id is None:
                                    print("üéâ Workflow ho√†n th√†nh!")
                                    return True
                                else:
                                    completed_nodes += 1
                                    print(f"‚öôÔ∏è  ƒêang x·ª≠ l√Ω node: {node_id} ({completed_nodes} nodes ƒë√£ ho√†n th√†nh)")
                        
                        elif data["type"] == "progress":
                            progress_data = data.get("data", {})
                            value = progress_data.get("value", 0)
                            max_value = progress_data.get("max", 100)
                            node = progress_data.get("node")
                            percentage = (value / max_value * 100) if max_value > 0 else 0
                            print(f"üìä Node {node}: {value}/{max_value} ({percentage:.1f}%)")
                        
                        elif data["type"] == "execution_error":
                            print(f"‚ùå L·ªói th·ª±c thi: {data}")
                            return False
                            
                        elif data["type"] == "execution_cached":
                            cached_nodes = data.get("data", {}).get("nodes", [])
                            print(f"üíæ {len(cached_nodes)} nodes ƒë∆∞·ª£c cache")
                
                except asyncio.TimeoutError:
                    print("‚è∞ WebSocket timeout, ti·∫øp t·ª•c ƒë·ª£i...")
                    continue
                except Exception as e:
                    print(f"‚ùå L·ªói WebSocket: {e}")
                    break
                    
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket: {e}")
        print("üîÑ Fallback: Ki·ªÉm tra file output ƒë·ªãnh k·ª≥...")
        
        # Fallback: ki·ªÉm tra file output b·∫•t ƒë·ªìng b·ªô
        return await wait_for_completion_fallback(prompt_id)

async def wait_for_completion_fallback(prompt_id):
    start_time = time.time()
    
    while True:
        await asyncio.sleep(2)  # Ch·ªù b·∫•t ƒë·ªìng b·ªô
        
        video_path = await find_images_by_id("my_custom_video")
        if video_path and os.path.exists(video_path):
            file_time = os.path.getmtime(video_path)
            if file_time > start_time:
                print("‚úÖ Ph√°t hi·ªán video m·ªõi ƒë∆∞·ª£c t·∫°o!")
                return True
        
        if time.time() - start_time > 300:
            print("‚è∞ Timeout: Qu√° 5 ph√∫t kh√¥ng th·∫•y k·∫øt qu·∫£")
            return False

# ========== H√†m t√¨m video m·ªõi nh·∫•t b·∫•t ƒë·ªìng b·ªô ==========
# async def find_latest_video(prefix, output_dir=str(BASE_DIR / "ComfyUI/output")):    
#     # Ch·∫°y file operations trong executor ƒë·ªÉ kh√¥ng block event loop
#     def _find_files():
#         patterns = [
#             f"{prefix}*audio*.mp4", 
#             f"{prefix}_*-audio.mp4"
#         ]
        
#         all_files = []
#         for pattern in patterns:
#             files = glob.glob(os.path.join(output_dir, pattern))
#             all_files.extend(files)
        
#         if not all_files:
#             print(f"üîç Kh√¥ng t√¨m th·∫•y file n√†o v·ªõi prefix '{prefix}' trong {output_dir}")
#             # List t·∫•t c·∫£ file .mp4 ƒë·ªÉ debug
#             all_mp4 = glob.glob(os.path.join(output_dir, "*.mp4"))
#             if all_mp4:
#                 print(f"üìÅ C√°c file .mp4 hi·ªán c√≥:")
#                 for f in sorted(all_mp4, key=os.path.getmtime, reverse=True)[:5]:
#                     print(f"   {f} (modified: {time.ctime(os.path.getmtime(f))})")
#             return None
        
#         latest_file = max(all_files, key=os.path.getmtime)
#         print(f"üìÅ T√¨m th·∫•y file m·ªõi nh·∫•t: {latest_file}")
#         return latest_file
    
#     # Ch·∫°y trong executor
#     loop = asyncio.get_event_loop()
#     return await loop.run_in_executor(None, _find_files)
# ============================================================
async def find_images_by_id(image_id, output_dir=str(BASE_DIR / "ComfyUI/output")):
# async def find_images_by_id(image_id, output_dir="/home/toan/image_gen/ComfyUI/output"):
    # output_dir="/home/toan/image_gen/ComfyUI/output"
    def _find_files():
        target_dir = os.path.join(output_dir, str(image_id))
        if not os.path.exists(target_dir):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c: {target_dir}")
            return []
        print("===============")
        pattern = os.path.join(target_dir, f"{image_id}*.png")
        files = glob.glob(pattern)
        print(pattern)
        if not files:
            print(f"üîç Kh√¥ng t√¨m th·∫•y file n√†o v·ªõi id '{image_id}' trong {target_dir}")
            return []
        files_sorted = sorted(files, key=os.path.getmtime, reverse=True)
        return files_sorted[:2]

    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, _find_files)

# ========== H√†m ch√≠nh ƒë∆∞·ª£c c·∫≠p nh·∫≠t ==========
async def generate_video_cmd(prompt, cond_image, style, job_id,resolution):
    # comfy_process = await start_comfyui()
    # await asyncio.sleep(10)  
    try:

        print("üîÑ ƒêang load workflow...")
        workflow = await load_workflow(str(BASE_DIR) + "/" + WORKFLOW_INFINITETALK_PATH)

        style_prefix = {
            "realistic": (
                "A highly detailed, ultra-realistic, high-resolution photograph of "
            ),
            "anime": (
                "An expressive, vibrant anime-style illustration of "
            ),
            "cartoon": (
                "A bold, colorful, exaggerated cartoon drawing of "
            ),
            "vintage": (
                "A nostalgic, retro, vintage-style photograph with warm tones of "
            ),
            "minimal": (
                "A clean, simple, minimalistic flat design of "
            ),
            "artistic": (
                "An imaginative, creative, artistic painting with unique textures of "
            )
        }
        rule = style_prefix.get(style, "")
        workflow["6"]["inputs"]["text"] = rule + prompt
        print(rule + prompt[0])

        wf_h=1024
        wf_w=1024
        if resolution == "1:1":
            wf_w = 1024
            wf_h = 1024
        elif resolution=="16:9":
            wf_w = 1280
            wf_h = 720
        elif resolution=="9:16":
            wf_w = 720
            wf_h = 1280
        
        workflow["162"]["inputs"]["width"] = wf_w
        workflow["162"]["inputs"]["height"] = wf_h
        

# ===========================================================
        prefix = job_id+"/"+job_id
        workflow["171"]["inputs"]["filename_prefix"] = prefix
        print("üì§ ƒêang g·ª≠i workflow ƒë·∫øn ComfyUI...")
        resp = await queue_prompt(workflow)

        # print("resp",resp)
        prompt_id = resp["prompt_id"]
        client_id = resp["client_id"]
        print(f"‚úÖ ƒê√£ g·ª≠i workflow! Prompt ID: {prompt_id}")
        success = await wait_for_completion(prompt_id, client_id)
        
        if not success:
            print("‚ùå Workflow th·∫•t b·∫°i")
            return None

        print("üîç ƒêang t√¨m image ƒë√£ t·∫°o...")
        img = await find_images_by_id(job_id)
        return img
    finally:
        # await stop_comfyui(comfy_process)
        print("done")

async def move_file_async(src_path, dst_path):
    def move_file():
        os.rename(src_path, dst_path)
    
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, move_file)
async def delete_file_async(file_path: str):
    def delete_file():
        if os.path.exists(file_path):
            os.remove(file_path)
    
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, delete_file)